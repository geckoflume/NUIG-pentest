#!/usr/bin/env python3
from os.path import splitext, basename
from subprocess import run, TimeoutExpired, PIPE, STDOUT

from tests.test import Test

title = 'Public IP address'
desc = 'The board will attempt to connect to the Internet and provide information regarding to the Public IP address ' \
       'that it is using. Please Note: If this content is blank, the connection to the Internet was probably blocked ' \
       'by a firewall.'
vulnerability = 'This test yields important information relating to the Internet connection used by the target ' \
                'infrastructure.'
exploit = 'A user could use the test results to try and attack the target infrastructure ‘from’ the Internet. For ' \
          'example, assume that this test shows that the target infrastructure is using public IP address x.x.x.x. ' \
          'The user can, from anywhere on the Internet, attempt to penetrate the target infrastructure by focusing ' \
          'attacks on IP address x.x.x.x.'
countermeasure = 'For this test, the board attempts to access a website on the Internet using TCP port 80 (HTTP). To ' \
                 'prevent this type of attack consider using a web proxy to secure Internet access. The firewalls ' \
                 'should permit the web proxies access to the Internet, whilst denying all other users access to the ' \
                 'Internet on known website ports such as TCP port 80 (HTTP).'


class PublicIp(Test):
    def __init__(self):
        Test.__init__(self)
        self.title = title
        self.desc = desc
        self.vulnerability = vulnerability
        self.exploit = exploit
        self.countermeasure = countermeasure
        self.filename = splitext(basename(__file__))[0] + ".md"
        self.pre_run()
        self.run()

    def run(self):
        try:
            # --interface interface specifies the interface to use
            # -s silent mode
            # -m 20 maximum time of 20 seconds
            proc = run(["curl", "--interface", Test.interface.name, "-s", "-m 20", "ifconfig.co"], stdout=PIPE,
                       stderr=STDOUT, timeout=30)
        except TimeoutExpired as e:
            self.results = e.stdout.decode()
            self.code = 1
        else:
            self.results = proc.stdout.decode()
            self.code = proc.returncode

        self.build_report()
        self.end()
