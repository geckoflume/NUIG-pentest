#!/usr/bin/env python3
import time
from os.path import splitext, basename
from subprocess import run, TimeoutExpired, PIPE, STDOUT

from tests.test import Test
from tools.airmon import Airmon

title = 'Wireless network scanning'
desc = 'The board will listen for wireless beacons that advertise the presence of wireless networks. Please Note: ' \
       'The board has a 2.4Ghz radio and will detect 802.11b/g/n wireless networks.'
vulnerability = 'This scan yields important information relating wireless networks detected in the target ' \
                'environment. The board will detail the security settings associated with each wireless network that ' \
                'is detected.'
exploit = 'A user could use the scan results to perform all kinds of attacks against the wireless infrastructure. ' \
          'For example, if the board detects the presence of an SSID using PSK (Pre Shared Key) security, ' \
          'the board can be used to try and crack the PSK which would allow the board to decrypt wireless user traffic.'
countermeasure = 'One way to prevent this scan from detecting your wireless networks is to disable beacons on your ' \
                 'SSIDs. However, there are other methods to detect SSIDs such as listening to wireless probe ' \
                 'requests/responses. A wireless network using WPA2 EAP-TLS authentication with rogue access-point ' \
                 'detection, provides a high level of wireless security.'


class WifiScan(Test):
    def __init__(self):
        Test.__init__(self)
        self.title = title
        self.desc = desc
        self.vulnerability = vulnerability
        self.exploit = exploit
        self.countermeasure = countermeasure
        self.filename = splitext(basename(__file__))[0] + ".md"
        self.airmon = Airmon()
        self.pre_run()
        self.run()

    def run(self):
        time.sleep(5)
        self.airmon.station()
        try:
            proc = run(["iwlist", Test.interface.name, "scan"], stdout=PIPE, stderr=STDOUT, timeout=30)
        except TimeoutExpired as e:
            results = e.stdout.decode()
            self.code = 1
        else:
            results = proc.stdout.decode()
            self.code = proc.returncode

        for line in results.splitlines():
            if 'Unknown' not in line and 'tsf' not in line and 'Master' not in line and 'completed' not in line:
                self.results += line + "\n"

        self.build_report()
        self.end()
