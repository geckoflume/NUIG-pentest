#!/usr/bin/env python3
from os.path import splitext, basename
from subprocess import run, TimeoutExpired, PIPE, STDOUT

from tests.test import Test

title = 'NBTScan (NetBIOS scan)'
desc = 'The NBTScan software can scan IP networks for Microsoft Windows NetBIOS name information. The board will ' \
       'implement an NBTScan against the board local subnet ' + Test.interface + ' - ' + Test.network + '.'
vulnerability = 'This scan yields important information related to users/devices and is the first step in finding ' \
                'open file shares.'
exploit = 'A user could use the scan results to view open file shares that contain sensitive information. In ' \
          'addition, the user can use the scan results to target specific users and/or devices in later attacks. For ' \
          'example, if a specific employee is a target, the scan results usually indicate the userâ€™s name. This ' \
          'allows the user to carry out direct attacks against that specific employee.'
countermeasure = 'The best way to prevent NBTScan within the network is to use IEEE 802.1x port authentication. It ' \
                 'is also considered good practise to routinely scan the network and shut down any open file shares ' \
                 'and educating users about the risks of using open file shares.'


class NbtScan(Test):
    def __init__(self):
        Test.__init__(self)
        self.title = title
        self.desc = desc
        self.vulnerability = vulnerability
        self.exploit = exploit
        self.countermeasure = countermeasure
        self.filename = splitext(basename(__file__))[0] + ".md"
        self.run()

    def run(self):
        try:
            # -v verbose output
            # -r use local port 137 for scans (Win95 boxes respond to this only)
            # -r human-readable names for services
            proc = run(["nbtscan", "-vrh", str(Test.network)], stdout=PIPE, stderr=STDOUT, timeout=60)
        except TimeoutExpired as e:
            self.results = e.stdout.decode()
            self.code = 1
        else:
            self.results = proc.stdout.decode()
            self.code = proc.returncode

        self.build_report()
        self.end()
