#!/usr/bin/env python3
from os.path import splitext, basename
from subprocess import TimeoutExpired

from tests.test import Test
from tools.airodump import Airodump
from tools.mdk3 import Mdk3

title = 'Hidden SSID decloaking'
desc = 'The board will try discover all SSIDs for detected hidden SSIDs networks ([Wikipedia](' \
       'https://en.wikipedia.org/wiki/Network_cloaking)).'
vulnerability = 'This attack shows the weakest attempt to protect a wireless network, network cloaking.'
exploit = 'A user could use the results to perform all kinds of attacks against the wireless infrastructure. ' \
          'For example, if the board detects the presence of an SSID using PSK (Pre Shared Key) or WEP security, ' \
          'the board can be used to try and crack the PSK or the WEP which would allow the board to decrypt wireless ' \
          'user traffic.'
countermeasure = 'One way to prevent this attack from decloaking your wireless SSID is to use data encryption such ' \
                 'as WPA2 authentication, or to remove the access point from the network.'


class HiddenSsid(Test):
    def __init__(self):
        Test.__init__(self)
        self.title = title
        self.desc = desc
        self.vulnerability = vulnerability
        self.exploit = exploit
        self.countermeasure = countermeasure
        self.filename = splitext(basename(__file__))[0] + ".md"
        self.pre_run()
        self.run()

    def run(self):
        self.code = 1
        for t in Airodump.targets:
            if t.hidden_essid:
                wordlist = False
                self.results += t.bssid + " has an hidden ESSID\n"
                if t.clients:
                    print("Trying to decloak " + t.bssid + " with clients")
                    self.results += "Trying to decloak " + t.bssid + " using deauth\n"
                    # Monitor mode
                    self.airmon.monitor(channel=t.channel)
                    scan = Test.airodump.scan_target(t, "hiddenssid")
                    print("Broadcast deauth AP " + t.bssid)
                    Test.aireplay.deauth_broadcast(t)
                    for c in t.clients:
                        print("Deauth client " + c.mac + " from " + t.bssid)
                        Test.aireplay.deauth_client(t, c)
                    try:
                        scan.wait(timeout=10)
                    except TimeoutExpired:
                        # Station/managed mode
                        self.airmon.station()
                        target_result = Test.airodump.parse_single_target(t.target_ivs_file + "hiddenssid-01.csv")
                        if target_result and target_result.bssid == t.bssid and target_result.essid:
                            """
                            If the target result is not None, and the target result bssid matches the hidden ssid 
                            target and the essid is not hidden, update the existing target
                            """
                            t.decloaked = True
                            t.hidden_essid = False
                            t.essid = target_result.essid
                            print("Successful!")
                            self.results += "Decloaked access point " + t.bssid + " with ESSID=" + t.essid + (
                                " using deauth\n")
                            self.code = 0
                        else:
                            wordlist = True
                else:
                    self.results += "No clients associated!\n"
                    wordlist = True
                if wordlist:
                    self.results += "Trying to decloak " + t.bssid + " using SSID wordlist\n"
                    # Monitor mode
                    self.airmon.monitor(channel=t.channel)
                    mdk = Mdk3()
                    result = mdk.wordlist(t)
                    # Station/managed mode
                    self.airmon.station()
                    if result:
                        """
                        If the result is not None, update the existing target
                        """
                        print("Trying to decloak " + t.bssid + " with wordlist")
                        t.decloaked = True
                        t.hidden_essid = False
                        t.essid = result
                        print("Successful!")
                        self.results += "Decloaked access point " + t.bssid + " with ESSID=" + t.essid + (
                            " using wordlist\n")
                        self.code = 0
        self.build_report()
        self.end()
