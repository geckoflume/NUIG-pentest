#!/usr/bin/env python3
from os.path import splitext, basename
from subprocess import run, TimeoutExpired, PIPE, STDOUT

from tests.test import Test

title = 'Nmap hosts and services discovery'
desc = 'The board will perform an nmap ‘Quick Scan’ against the boards local subnet (' + Test.interface + ') - ' + \
       Test.network + '.'
vulnerability = 'This information yields extremely useful information about the users and devices that reside on the ' \
                'same IP subnet as the board (' + Test.interface + ' interface).'
exploit = 'Although there is not a direct exploit for this vulnerability, the user can use this information to  ' \
          'target specific users and/or devices. The user may notice a specific service operating on a device and ' \
          'attempt to compromise that device using a known vulnerability associated with that service. An additional ' \
          'attack vector may include using ARP poisoning against a local server to capture passwords in a classic ' \
          'MITM (Man In The Middle) style attack.'
countermeasure = 'The best way to prevent nmap scanning within the internal network is to use using IEEE 802.1x port ' \
                 'authentication. An alternative, less desirable, option is to use Private VLANs.'


class Nmap(Test):
    def __init__(self):
        Test.__init__(self)
        self.title = title
        self.desc = desc
        self.vulnerability = vulnerability
        self.exploit = exploit
        self.countermeasure = countermeasure
        self.filename = splitext(basename(__file__))[0] + ".md"
        self.run()

    def run(self):
        try:
            # -F fast mode - scan fewer ports than the default scan
            # -T5 timing template (higher is faster)
            # -Pn treat all hosts as online -- skip host discovery
            # -sS TCP SYN scan
            # -O enable OS detection
            # --osscan-limit limit OS detection to promising targets (if at least one open and one closed TCP port
            # are found)
            # -e interface specifies the interface to use
            proc = run(
                ["nmap", str(Test.network), "-F", "-T5", "-Pn", "-sS", "-O", "--osscan-limit", "-e", Test.interface],
                stdout=PIPE, stderr=STDOUT, timeout=120)
        except TimeoutExpired as e:
            self.results = e.stdout.decode()
            self.code = 1
        else:
            self.results = proc.stdout.decode()
            self.code = proc.returncode

        for line in self.results.splitlines():
            if "Failed" in line:
                self.code = 1

        self.build_report()
        self.end()
