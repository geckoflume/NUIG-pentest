#!/usr/bin/env python3
from os.path import splitext, basename
from tests.test import Test
from subprocess import run, TimeoutExpired, PIPE, STDOUT

title = 'Dynamic routing protocol snooping'
desc = 'The board will listen, capture and display dynamic routing protocol messages. This test supports OSPF (Open ' \
       'Shortest Path First), EIGRP (Enhanced Interior Gateway Routing Protocol) and RIP (Routing Information ' \
       'Protocol) which are commonly used dynamic routing protocols used within enterprises. The test will run for ' \
       '60 seconds based on default routing protocol timers.'
vulnerability = 'The presence of dynamic routing protocols creates an opportunity for the user to implement dynamic ' \
                'routing protocol related attacks.'
exploit = 'Is is possible to use a routing protocol software (such as "Quagga"). It allows to participate in dynamic ' \
          'routing protocols such as OSPF, RIP and BGPand can be used to manipulate the routing tables on adjacent ' \
          'routers, ensuring traffic is routed to it. Once this is achieved, the user can launch a DoS (Denial of ' \
          'Service) attack by black-holing all traffic it receives or it can perform a MITM (Man In The Middle) ' \
          'attack, whereby user  traffic is routed across it (the board is a transit router and seeâ€™s all user ' \
          'traffic).'
countermeasure = 'All dynamic routing protocols support authentication and this should be enabled for security ' \
                 'reasons. If a dynamic routing protocol message is received that has not been encrypted with the ' \
                 'same authentication key, the message is discarded. Configuring authentication for routing protocol ' \
                 'messages will prevent the board from implementing this exploit.'


class DynamicRouting(Test):
    def __init__(self):
        Test.__init__(self)
        self.title = title
        self.desc = desc
        self.vulnerability = vulnerability
        self.exploit = exploit
        self.countermeasure = countermeasure
        self.filename = splitext(basename(__file__))[0] + ".md"
        self.run()

    def run(self):
        # -vvv very verbose output
        # -i interface specifies the interface to use
        # proto ospf or eigrp or udp port 520 capture only OSPF, EIGRP or RIP (port 520) packets
        # default hello timer for default routing protocol is 60 seconds so this should capture all announcements
        try:
            run(["tcpdump", "-vvv", "-i", self.interface, "proto ospf or eigrp or udp port 520"], stdout=PIPE, stderr=STDOUT,
                timeout=60)
        except TimeoutExpired as e:
            self.results = e.stdout.decode()

        self.build_report()
        self.end()
