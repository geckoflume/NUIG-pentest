#!/usr/bin/env python3
from os.path import splitext, basename
from subprocess import run, TimeoutExpired, PIPE, STDOUT

from tests.test import Test

title = 'CDP (Cisco Discovery Protocol) snooping'
desc = 'The board will listen, capture and display any CDP (Cisco Discovery Protocol) announcements. The test will ' \
       'run for 60 seconds based on the default hello timer for CDP.'
vulnerability = 'The information contained within CDP announcements leaks important detail relating to the Cisco ' \
                'network devices being deployed. Network devices may include Cisco switches, wireless access-points ' \
                'and routers.'
exploit = 'Although there is not a direct exploit for this vulnerability, the user now has possession of very ' \
          'sensitive information relating to the Cisco network devices, such as the hardware model, software version ' \
          'in use, IP addresses being used, etc. Armed with this information, the user can launch attacks. For ' \
          'example, the user can research vulnerabilities relating to the software version advertised by CDP and ' \
          'launch attacks to compromise the network device.'
countermeasure = 'CDP is a useful tool, however the default settings leak sensitive information. The best ' \
                 'countermeasure for this is to disable CDP on all user facing switch interfaces - in other words ' \
                 'CDP is only enabled on interfaces that connect to other network devices such as switch-to-switch ' \
                 'uplinks.'


class Cdp(Test):
    def __init__(self):
        Test.__init__(self)
        self.title = title
        self.desc = desc
        self.vulnerability = vulnerability
        self.exploit = exploit
        self.countermeasure = countermeasure
        self.filename = splitext(basename(__file__))[0] + ".md"
        self.run()

    def run(self):
        # -nn don't do dns or port number lookups
        # -vvv very verbose output
        # -i interface specifies the interface to use
        # -s 1500 capture 1500 bytes of the packet (typical MTU size)
        # ether[20:2] == 0x2000  capture only packets that have a 2 byte value of hex 2000 starting at byte 20
        # default hello timer for CDP is 60 seconds so this should capture all announcements
        try:
            run(["tcpdump", "-nn", "-vvv", "-i", self.interface.name, "-s 1500", "ether[20:2] == 0x2000"], stdout=PIPE,
                stderr=STDOUT,
                timeout=60)
        except TimeoutExpired as e:
            self.results = e.stdout.decode()

        self.build_report()
        self.end()
