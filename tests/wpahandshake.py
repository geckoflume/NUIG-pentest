#!/usr/bin/env python3
from os.path import splitext, basename
from subprocess import run, DEVNULL

from tests.test import Test
from tools.airodump import Airodump
from tools.report import Report

title = 'WPA handshake capture'
desc = 'The board will try disconnect clients from all detected WPA networks and capture the four-way WPA/WPA2 ' \
       'handshake. Handshakes (pcap files) will be found in the ' + Test.tmp_path + ' folder.'
vulnerability = 'This attack shows one of WPA\'s only weaknesses, the capture of the handshake containing the hash ' \
                'of password, i.e. the encrypted password.'
exploit = 'A user could use the results to attempt to crack the hash, offline, on a powerful machine using ' \
          'bruteforce or dictionnaries'
countermeasure = 'There is no way to this attack from capturing the handshake. You can only use stronger passwords, ' \
                 'to prevent attackers from bruteforcing the pre-shared key and change your default key and default ' \
                 'SSID to prevent malicious people from using [rainbow tables](' \
                 'https://en.wikipedia.org/wiki/Rainbow_table)'


class WpaHandshake(Test):
    def __init__(self):
        run(["pkill", "air*"], stdout=DEVNULL, stderr=DEVNULL)
        Test.__init__(self)
        self.title = title
        self.desc = desc
        self.vulnerability = vulnerability
        self.exploit = exploit
        self.countermeasure = countermeasure
        self.filename = splitext(basename(__file__))[0] + ".md"
        self.pre_run()
        self.run()

    def run(self):
        # Monitor mode
        Test.airmon.monitor()

        # Extracting
        self.code = 1
        if Report.wep_count < 1:
            self.results += "\nNo WPA networks!\n"
        else:
            for t in Airodump.targets:
                if t.encryption is 'WPA':
                    self.results += t.essid + " (" + t.bssid + ")" + " handshake"
                    if t.clients:
                        code = Test.aircrack.auto_capture_wpa(t)
                        # Logging
                        if code is 0:
                            self.results += " captured!\n"
                            self.code = 0
                        else:
                            self.results += " not captured\n"
                    else:
                        self.results += " not captured (no clients connected)\n"

        # Station/managed mode
        Test.airmon.station()

        self.build_report()
        self.end()
