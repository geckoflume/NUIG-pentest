#!/usr/bin/env python3
from os.path import splitext, basename
from subprocess import run, TimeoutExpired, PIPE, STDOUT

from tests.test import Test

title = 'FHRP (First Hop Redundancy Protocol) snooping'
desc = 'The board will listen, capture and display FHRP (First Hop Redundancy Protocol) messages. FHRP’s provide ' \
       'redundancy for the default gateway on a LAN or VLAN. HSRP (Hot Standby Router Protocol) and VRRP (Virtual ' \
       'Router Redundancy Protocol) are commonly used FHRP’s used in enterprises. The test will run for 10 seconds ' \
       'based on the default HSRP and VRRP timers.'
vulnerability = 'The presence of FHRPs creates an opportunity for the user to implement FHRP related attacks.'
exploit = 'It is possible to setup a VRRP daemon (such as keepalived) that allows to participate in VRRP. Then, ' \
          'it can be configured with a high VRRP priority to ensure it becomes the ‘active’ default gateway on the ' \
          'LAN or VLAN. Once this is achieved, the user can launch a DoS (Denial of Service) attack on the LAN or ' \
          'VLAN by black-holing all traffic or it can perform a MITM (Man In The Middle) attack, whereby all user ' \
          'traffic on the LAN or VLAN is routed across it (the board is the default gateway and see’s all user ' \
          'traffic).'
countermeasure = 'The use of FHRP’s is common and considered good practise. To countermeasure this attack, ' \
                 'both HSRP and VRRP support an "MD5 Authentication" feature which generates an Message Digest 5 (' \
                 'MD5) digest for the HSRP and VRRP messages. If a FHRP message is received that has not been ' \
                 'encrypted with the same authentication key, the message is discarded. Configuring authentication ' \
                 'for FHRP messages will prevent the board from implementing this exploit.'


class Fhrp(Test):
    def __init__(self):
        Test.__init__(self)
        self.title = title
        self.desc = desc
        self.vulnerability = vulnerability
        self.exploit = exploit
        self.countermeasure = countermeasure
        self.filename = splitext(basename(__file__))[0] + ".md"
        self.pre_run()
        self.run()

    def run(self):
        # -vvv very verbose output
        # -i interface specifies the interface to use
        # proto VRRP or udp port 1985 capture only VRRP or HSRP (port 1985) packets
        # default hello timer for HSRP and VRRP is 10 seconds so this should capture all announcements
        try:
            run(["tcpdump", "-vvv", "-i", self.interface.name, "proto VRRP or udp port 1985"], stdout=PIPE,
                stderr=STDOUT,
                timeout=10)
        except TimeoutExpired as e:
            self.results = e.stdout.decode()

        self.build_report()
        self.end()
