#!/usr/bin/env python3
from ipaddress import ip_network
from os.path import splitext, basename
from subprocess import run, TimeoutExpired, PIPE, STDOUT

from tests.test import Test

title = 'IP details'
vulnerability = 'This is part of the reconnaissance phase, where the attacker can identify information such as the ' \
                'IP subnet, the default gateway and DNS configuration for the local network.'
exploit = 'Although there is not a direct exploit for this vulnerability, the information yielded can be used in ' \
          'more advanced tests later.'
countermeasure = 'To prevent an unauthorised device from receiving DHCP assigned IP address information, ' \
                 'the best countermeasure is to use IEEE 802.1x port authentication. Other, less desirable, ' \
                 'options include shutting down the switch interface or disabling DHCP services.'


class Ip(Test):
    def __init__(self):
        Test.__init__(self)
        self.title = title
        self.desc = 'Display the IP address details assigned to the ' + Test.interface.name + ' interface via DHCP. ' \
                                                                                              'The IP address, ' \
                                                                                              'Subnet Mask, ' \
                                                                                              'Default Gateway and ' \
                                                                                              'DNS information are ' \
                                                                                              'listed.'
        self.vulnerability = vulnerability
        self.exploit = exploit
        self.countermeasure = countermeasure
        self.filename = splitext(basename(__file__))[0] + ".md"
        self.pre_run()
        self.run()

    def run(self):
        try:
            # IP address
            proc = run(["ifconfig", self.interface.name], stdout=PIPE, stderr=STDOUT, timeout=5)
        except TimeoutExpired as e:
            results = e.stdout.decode()
            self.code = 1
        else:
            results = proc.stdout.decode()
            self.code = proc.returncode

        for line in results.splitlines():
            if self.interface.name in line or "inet" in line:
                self.results += line + "\n"

        try:
            # Interface details
            proc = run(["nmcli", "dev", "show", self.interface.name], stdout=PIPE, stderr=STDOUT, timeout=10)
        except TimeoutExpired as e:
            results = e.stdout.decode()
            self.code = 1
        else:
            results += proc.stdout.decode()
            if self.code is 0:
                self.code = proc.returncode

        self.results += "\n" + results

        # Extract IP address and network address
        for line in results.splitlines():
            if "IP4.ADDRESS" in line:
                Test.ip = line.split(" ")[-1]
                Test.network = ip_network(self.ip, strict=False)

        # If there is no IP address, set to failed
        if not Test.ip:
            self.code = 1
        else:
            Test.interface.has_ip = True

        self.build_report()
        self.end()
